//
// Created by baoxing on 2/25/18.
//

#include "../../../googletest/googletest/include/gtest/gtest.h"
#include "../../impl/impl.h"
#include <string>
#include "../../myImportandFunction/alignNeedlemanWunsch_simd.h"
#include "../../myImportandFunction/alignNeedlemanWunsch.h"

#include <iostream>
#include <ctime>
#include <ratio>
#include <chrono>


TEST(needlemanWunsch_simd_test, c1){
    std::string parameterFile = "configure";
    std::map<std::string, std::string> parameters = initialize_paramters(parameterFile, "./");
    NucleotideCodeSubstitutionMatrix nucleotideCodeSubstitutionMatrix(parameters);
    std::string dna_q = "ATGGCTGATAGGATCAAAGGTCCATGGAGTCCGAAGAAGACGAGCAGCTTCGTAGGCTTGTTGTTAAATACGGTCCAAGAAACTGGACAGTGATTAGCAAATCTATTCCCGGTAGATCGGGGAAATCGTGTCGTTTACGGTGGTGCAACCAGTTTCGCCGCAAGTTGAGCATCGGCCGTTTTCGGCTGAGGAAGACGAGACGATCGCACGTGCTCACGCTCAGTTCGGTAATAAATGGGCGACGATTGCTCGTCTTCTCAACGGTCGTACGGACAACGCCGTGAAGAATCACTGGAACTCGACGCTCAAGAGGAAATGCGGCGGTTACGACCATCGGGGTTACGATGGTTCGGAGGATCATCGGCCGGTTAAGAGATCGGTGAGTGCGGGATCTCCACCTGTTGTTACTGGGCTTTACATGAGCCCAGGAAGCCCAACTGGATCTGATGTCAGTGATTCAAGTACTATCCCGATATTACCTTCCGTTGAGCTTTTCAAGCCTGTGCCTAGACCTGGTGCTGTTGTGCTACCGCTTCCTATCGAAACGTCGTCTTCTTCCGATGATCCACCGACTTCGTTAAGCTTGTCACTTCCTGGTGCCGACGTAAGCGAGGAGTCAAACCGTAGCCACGAGTCAACGAATATCAACAACACCACTTCGAGCCGCCACAACCACAACAATACGGTGTCGTTTATGCCGTTTAGTGGTGGGTTTAGAGGTGCGATTGAGGAAATGGGGAAGTCTTTTCCCGGTAACGGAGGCGAGTTTATGGCGGTGGTGCAAGAGATGATTAAGGCGGAAGTGAGGAGTTACATGACGGAGATGCAACGGAACAATGGTGGCGGATTCGTCGGAGGATTCATTGATAATGGCATGATTCCGATGAGTCAAATTGGAGTTGGGAGAATCGAGTAG";
    std::string dna_d = "ATGGCTGATAGGATCAAGGTCCATGGAGTCCTGAAGAAGACGAGCAGCTTCGTAGGCTTTTGTTAAATACGGTCCAAGAAACTGGACAGTGATTAGCAAATCTATCCCGGTAGATCGGGGAAATCGTGTCGTTTACGGTGGTCAACCAGCTTTCGCCGCAAGTTGAGCATCGGCCGTTTTCGGCTGAGGAAGACGAGACGATCGCACGTGCTCACGCTCAGTTCGGTAATAAATGGGCGACGATTGCTCGTCTTCTCAACGGTCGTACGGACAACGCCGTGAAGAATCACTGGAACTCGACGCTCAAGAGGAAATGCGGCGGTTACGACCATCGGGGTTACGATGGTTCGGAGGATCATCGGCCGGTTAAGAGATCGGTGAGTGCGGGATCTCCACCTGTTGTTACTGGGCTTTACATGAGCCCAGGAAGCCCAACTGGATCTGATGTCAGTGATTCAAGTACTATCCCGATATTACCTTCCGTTGAGCTTTTCAAGCCTGTGCCTAGACCTGGTGCTGTTGTGCTACCGCTTCCTATCGAAACGTCGTCTTCTTCCGATGATCCACCGACTTCGTTAAGCTTGTCACTTCCTGGTGCCGACGTAAGCGAGGAGTCAAACCGTAGCCACGAGTCAACGAATATCAACAACACCACTTCGAGCCGCCACAACCACAACAATACGGTGTCGTTTATGCCGTTTAGTGGTGGGTTTAGAGGTGCGATTGAGGAAATGGGGAAGTCTTTTCCCGGTAACGGAGGCGAGTTTATGGCGGTGGTGCAAGAGATGATTAAGGCGGAAGTGAGGAGTTACATGACGGAGATGCAACGGAACAATGGTGGCGGATTCGTCGGAGGATTCATTGATAATGGCATGATTCCGATGAGTCAAATTGGAGTTGGGAGAATCGAGTAG";
    int32_t match_score = 1;
    int32_t mis_match_score = -1;
    int32_t open_gap_penalty = -2;
    int32_t extend_gap_penalty = -1;
    int32_t redLength = dna_q.length();

    NeedlemanWunsch_simd_Slow needlemanWunsch_simd(dna_q, dna_d, match_score, mis_match_score, open_gap_penalty, extend_gap_penalty, nucleotideCodeSubstitutionMatrix);
/*
    int32_t segLen = ( redLength+ 7)/8; //segment length, divide the query sequence into 4 segments

    __m256i* vProfile = needlemanWunsch_simd.query_profile_avx2_byte(nucleotideCodeSubstitutionMatrix);
    for( int32_t a=0; a<16; ++a ) {
        std::cout << "\""<< a <<"\"\t";
        int32_t *s = (int32_t *) (vProfile + a * segLen);
        for(int32_t k=0; k<8; ++k){
            for (int32_t i = 0; i < segLen; ++i) {
                std::cout << s[i * 8 + k] << "\t";
            }
        }
        std::cout << std::endl;
    }
    */
    ASSERT_EQ(0, 0);
}

TEST(needlemanWunsch_simd_test, c2){
    std::string parameterFile = "configure";
    std::map<std::string, std::string> parameters = initialize_paramters(parameterFile, "./");
    NucleotideCodeSubstitutionMatrix nucleotideCodeSubstitutionMatrix(parameters);
    std::string dna_q = "ATGGCTGATAGGATCAAAGGTCCATGGAGTCCTGAAGAAGACGAGCAGCTTCGTAGGCTTGTTGTTAAATACGGTCCAAGAAACTGGACAGTGATTAGCAAATCTATTCCCGGTAGATCGGGGAAATCGTGTCGTTTACGGTGGTGCAACCAGCTTTCGCCGCAAGTTGAGCATCGGCCGTTTTCGGCTGAGGAAGACGAGACGATCGCACGTGCTCACGCTCAGTTCGGTAATAAATGGGCGACGATTGCTCGTCTTCTCAACGGTCGTACGGACAACGCCGTGAAGAATCACTGGAACTCGACGCTCAAGAGGAAATGCGGCGGTTACGACCATCGGGGTTACGATGGTTCGGAGGATCATCGGCCGGTTAAGAGATCGGTGAGTGCGGGATCTCCACCTGTTGTTACTGGGCTTTACATGAGCCCAGGAAGCCCAACTGGATCTGATGTCAGTGATTCAAGTACTATCCCGATATTACCTTCCGTTGAGCTTTTCAAGCCTGTGCCTAGACCTGGTGCTGTTGTGCTACCGCTTCCTATCGAAACGTCGTCTTCTTCCGATGATCCACCGACTTCGTTAAGCTTGTCACTTCCTGGTGCCGACGTAAGCGAGGAGTCAAACCGTAGCCACGAGTCAACGAATATCAACAACACCACTTCGAGCCGCCACAACCACAACAATACGGTGTCGTTTATGCCGTTTAGTGGTGGGTTTAGAGGTGCGATTGAGGAAATGGGGAAGTCTTTTCCCGGTAACGGAGGCGAGTTTATGGCGGTGGTGCAAGAGATGATTAAGGCGGAAGTGAGGAGTTACATGACGGAGATGCAACGGAACAATGGTGGCGGATTCGTCGGAGGATTCATTGATAATGGCATGATTCCGATGAGTCAAATTGGAGTTGGGAGAATCGAGTAG";
    std::string dna_d = "ATGGCTGATAGGATCAAAGGTCCATGGAGTCCTGAAGAAGACGAGCAGCTTCGTAGGCTTGTTGTTAAATACGGTCCAAGAAACTGGACAGTGATTAGCAAATCTATTCCCGGTAGATCGGGGAAATCGTGTCGTTTACGGTGGTGCAACCAGCTTTCGCCGCAAGTTGAGCATCGGCCGTTTTCGGCTGAGGAAGACGAGACGATCGCACGTGCTCACGCTCAGTTCGGTAATAAATGGGCGACGATTGCTCGTCTTCTCAACGGTCGTACGGACAACGCCGTGAAGAATCACTGGAACTCGACGCTCAAGAGGAAATGCGGCGGTTACGACCATCGGGGTTACGATGGTTCGGAGGATCATCGGCCGGTTAAGAGATCGGTGAGTGCGGGATCTCCACCTGTTGTTACTGGGCTTTACATGAGCCCAGGAAGCCCAACTGGATCTGATGTCAGTGATTCAAGTACTATCCCGATATTACCTTCCGTTGAGCTTTTCAAGCCTGTGCCTAGACCTGGTGCTGTTGTGCTACCGCTTCCTATCGAAACGTCGTCTTCTTCCGATGATCCACCGACTTCGTTAAGCTTGTCACTTCCTGGTGCCGACGTAAGCGAGGAGTCAAACCGTAGCCACGAGTCAACGAATATCAACAACACCACTTCGAGCCGCCACAACCACAACAATACGGTGTCGTTTATGCCGTTTAGTGGTGGGTTTAGAGGTGCGATTGAGGAAATGGGGAAGTCTTTTCCCGGTAACGGAGGCGAGTTTATGGCGGTGGTGCAAGAGATGATTAAGGCGGAAGTGAGGAGTTACATGACGGAGATGCAACGGAACAATGGTGGCGGATTCGTCGGAGGATTCATTGATAATGGCATGATTCCGATGAGTCAAATTGGAGTTGGGAGAATCGAGTAG";
    int32_t match_score = 1;
    int32_t mis_match_score = -1;
    int32_t open_gap_penalty = -2;
    int32_t extend_gap_penalty = -1;

    NeedlemanWunsch_simd_Slow needlemanWunsch_simd(dna_q, dna_d, match_score, mis_match_score, open_gap_penalty, extend_gap_penalty, nucleotideCodeSubstitutionMatrix);
    ASSERT_EQ(0, 0);

    __m256i* vProfile = needlemanWunsch_simd.query_profile_avx2_byte(nucleotideCodeSubstitutionMatrix);

    needlemanWunsch_simd.ssw_avx2(vProfile, nucleotideCodeSubstitutionMatrix);

    for( int32_t i=0; i<=dna_q.length(); ++i ) {
        for( int32_t j=0; j<=dna_d.length(); ++j ) {
            std::cout << needlemanWunsch_simd.getSimilarity_matrix()[i][j] << "\t";
        }
        std::cout << std::endl;
    }
    std::cout << std::endl;
    ASSERT_EQ(0, 0);
}

TEST(needlemanWunsch_simd_test, c3){
    std::string parameterFile = "configure";
    std::map<std::string, std::string> parameters = initialize_paramters(parameterFile, "./");
    NucleotideCodeSubstitutionMatrix nucleotideCodeSubstitutionMatrix(parameters);
    std::string dna_q = "CATGTCATGT";
    std::string dna_d = "ACGCTGACGCTG";
    int32_t match_score = 1;
    int32_t mis_match_score = -1;
    int32_t open_gap_penalty = -2;
    int32_t extend_gap_penalty = -1;

    NeedlemanWunsch_simd_Slow needlemanWunsch_simd(dna_q, dna_d, match_score, mis_match_score, open_gap_penalty, extend_gap_penalty, nucleotideCodeSubstitutionMatrix);
    __m256i* vProfile = needlemanWunsch_simd.query_profile_avx2_byte(nucleotideCodeSubstitutionMatrix);

    needlemanWunsch_simd.ssw_avx2(vProfile, nucleotideCodeSubstitutionMatrix);
    needlemanWunsch_simd.get_optimal_alignment();
    needlemanWunsch_simd.print_results();

    for( int32_t i=0; i<=dna_q.length(); ++i ) {
        for( int32_t j=0; j<=dna_d.length(); ++j ) {
            std::cout << needlemanWunsch_simd.getSimilarity_matrix()[i][j] << "\t";
        }
        std::cout << std::endl;
    }
    std::cout << std::endl;

    ASSERT_EQ(0, 0);
}

TEST(needlemanWunsch_simd_test_slow, c3){
    std::string parameterFile = "configure";
    std::map<std::string, std::string> parameters = initialize_paramters(parameterFile, "./");
    NucleotideCodeSubstitutionMatrix nucleotideCodeSubstitutionMatrix(parameters);

    std::string dna_q = "ATGGCTGATAGGATCAAAGGTCCATGGAGTCCTGAAGAAGACGAGCAGCTTCGTAGGCTTGTTGTTAAATACGGTCCAAGAAACTGGACAGTGATTAGCAAATCTATTCCCGGTAGATCGGGGAAATCGTGTCGTTTACGGTGGTGCAACCAGCTTTCGCCGCAAGTTGAGCATCGGCCGTTTTCGGCTGAGGAAGACGAGACGATCGCACGTGCTCACGCTCAGTTCGGTAATAAATGGGCGACGATTGCTCGTCTTCTCAACGGTCGTACGGACAACGCCGTGAAGAATCACTGGAACTCGACGCTCAAGAGGAAATGCGGCGGTTACGACCATCGGGGTTACGATGGTTCGGAGGATCATCGGCCGGTTAAGAGATCGGTGAGTGCGGGATCTCCACCTGTTGTTACTGGGCTTTACATGAGCCCAGGAAGCCCAACTGGATCTGATGTCAGTGATTCAAGTACTATCCCGATATTACCTTCCGTTGAGCTTTTCAAGCCTGTGCCTAGACCTGGTGCTGTTGTGCTACCGCTTCCTATCGAAACGTCGTCTTCTTCCGATGATCCACCGACTTCGTTAAGCTTGTCACTTCCTGGTGCCGACGTAAGCGAGGAGTCAAACCGTAGCCACGAGTCAACGAATATCAACAACACCACTTCGAGCCGCCACAACCACAACAATACGGTGTCGTTTATGCCGTTTAGTGGTGGGTTTAGAGGTGCGATTGAGGAAATGGGGAAGTCTTTTCCCGGTAACGGAGGCGAGTTTATGGCGGTGGTGCAAGAGATGATTAAGGCGGAAGTGAGGAGTTACATGACGGAGATGCAACGGAACAATGGTGGCGGATTCGTCGGAGGATTCATTGATAATGGCATGATTCCGATGAGTCAAATTGGAGTTGGGAGAATCGAGTAG";
    std::string dna_d = "ATGGCTGATAGGATCAAAGGTCCATGGAGTCCTGAAGAAGACGAGCAGCTTCGTAGGCTTGTTGTTAAATACGGTCCAAGAAACTGGACAGTGATTAGCAAATCTATTCCCGGTAGATCGGGGAAATCGTGTCGTTTACGGTGGTGCAACCAGCTTTCGCCGCAAGTTGAGCATCGGCCGTTTTCGGCTGAGGAAGACGAGACGATCGCACGTGCTCACGCTCAGTTCGGTAATAAATGGGCGACGATTGCTCGTCTTCTCAACGGTCGTACGGACAACGCCGTGAAGAATCACTGGAACTCGACGCTCAAGAGGAAATGCGGCGGTTACGACCATCGGGGTTACGATGGTTCGGAGGATCATCGGCCGGTTAAGAGATCGGTGAGTGCGGGATCTCCACCTGTTGTTACTGGGCTTTACATGAGCCCAGGAAGCCCAACTGGATCTGATGTCAGTGATTCAAGTACTATCCCGATATTACCTTCCGTTGAGCTTTTCAAGCCTGTGCCTAGACCTGGTGCTGTTGTGCTACCGCTTCCTATCGAAACGTCGTCTTCTTCCGATGATCCACCGACTTCGTTAAGCTTGTCACTTCCTGGTGCCGACGTAAGCGAGGAGTCAAACCGTAGCCACGAGTCAACGAATATCAACAACACCACTTCGAGCCGCCACAACCACAACAATACGGTGTCGTTTATGCCGTTTAGTGGTGGGTTTAGAGGTGCGATTGAGGAAATGGGGAAGTCTTTTCCCGGTAACGGAGGCGAGTTTATGGCGGTGGTGCAAGAGATGATTAAGGCGGAAGTGAGGAGTTACATGACGGAGATGCAACGGAACAATGGTGGCGGATTCGTCGGAGGATTCATTGATAATGGCATGATTCCGATGAGTCAAATTGGAGTTGGGAGAATCGAGTAG";

    int32_t match_score = 1;
    int32_t mis_match_score = -1;
    int32_t open_gap_penalty = -2;
    int32_t extend_gap_penalty = -1;

    std::chrono::high_resolution_clock::time_point t1 = std::chrono::high_resolution_clock::now();

    for( int i=0; i<1000; ++i ){
        NeedlemanWunsch needlemanWunsch(dna_q, dna_d, match_score, mis_match_score, open_gap_penalty, extend_gap_penalty, nucleotideCodeSubstitutionMatrix);
        needlemanWunsch.calculate_similarity( nucleotideCodeSubstitutionMatrix );
        needlemanWunsch.get_optimal_alignment();
//        needlemanWunsch.print_results();
    }
    std::chrono::high_resolution_clock::time_point t2 = std::chrono::high_resolution_clock::now();
    for( int i=0; i<1000; ++i ){
        NeedlemanWunsch_simd_Slow needlemanWunsch_simd(dna_q, dna_d, match_score, mis_match_score, open_gap_penalty, extend_gap_penalty, nucleotideCodeSubstitutionMatrix);
        __m256i* vProfile = needlemanWunsch_simd.query_profile_avx2_byte(nucleotideCodeSubstitutionMatrix);

        needlemanWunsch_simd.ssw_avx2(vProfile, nucleotideCodeSubstitutionMatrix);
        needlemanWunsch_simd.get_optimal_alignment();
    }

    std::chrono::high_resolution_clock::time_point t3 = std::chrono::high_resolution_clock::now();
    for( int i=0; i<1000; ++i ){
        NeedlemanWunsch_simd_Slow needlemanWunsch_simd(dna_q, dna_d, match_score, mis_match_score, open_gap_penalty, extend_gap_penalty, nucleotideCodeSubstitutionMatrix);
        __m256i* vProfile = needlemanWunsch_simd.query_profile_avx2_byte(nucleotideCodeSubstitutionMatrix);
        needlemanWunsch_simd.ssw_avx2(vProfile, nucleotideCodeSubstitutionMatrix);
        needlemanWunsch_simd.get_optimal_alignment();
    }
    std::chrono::high_resolution_clock::time_point t4 = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::milli> time_span1 = t2 - t1;
    std::chrono::duration<double, std::milli> time_span2 = t3 - t2;
    std::chrono::duration<double, std::milli> time_span3 = t4 - t3;
    std::cout << "time costing " << time_span1.count() << std::endl;
    std::cout << "time costing " << time_span2.count()<< std::endl;
    std::cout << "time costing " << time_span3.count()<< std::endl;
    ASSERT_EQ(0, 0);
}


TEST(NeedlemanWunsch, c3){
    std::string parameterFile = "configure";
    std::map<std::string, std::string> parameters = initialize_paramters(parameterFile, "./");
    NucleotideCodeSubstitutionMatrix nucleotideCodeSubstitutionMatrix(parameters);
    std::string dna_q = "CATGTCATGT";
    std::string dna_d = "ACGCTGACGCTG";
    int32_t match_score = 1;
    int32_t mis_match_score = -1;
    int32_t open_gap_penalty = -2;
    int32_t extend_gap_penalty = -1;
    ASSERT_EQ(0.0, 0.0);
    NeedlemanWunsch needlemanWunsch(dna_q, dna_d, match_score, mis_match_score, open_gap_penalty, extend_gap_penalty, nucleotideCodeSubstitutionMatrix);
    needlemanWunsch.calculate_similarity( nucleotideCodeSubstitutionMatrix );
    needlemanWunsch.get_optimal_alignment();
    needlemanWunsch.print_results();
    std::cout << "finished" << std::endl;

    ASSERT_EQ(0.0, 0.0);
}


TEST(needlemanWunsch_simd_test, c4){
    std::string parameterFile = "configure";
    std::map<std::string, std::string> parameters = initialize_paramters(parameterFile, "./");
    NucleotideCodeSubstitutionMatrix nucleotideCodeSubstitutionMatrix(parameters);
    std::string dna_q = "ATGGCTATAGGACAAAGGTCCATGGAGTCCTGAAGAAGACGAGCAGCTTCGTAGGCTTGTTGTTAAATACGGTCCAAGAAACTGGACAGTGATTAGCAAATCTATTCCCGGTAGATCGGGGAAATCGTGTCGTTTACGGTGGTGCAACCAGCTTTCGCCGCAAGTTGAGCATCGGCCGTTTTCGGCTGAGGAAGACGAGACGATCGCACGTGCTCACGCTCAGTTCGGTAATAAATGGGCGACGATTGCTCGTCTTCTCAACGGTCGTACGGACAACGCCGTGAAGAATCACTGGAACTCGACGCTCAAGAGGAAATGCGGCGGTTACGACCATCGGGGTTACGATGGTTCGGAGGATCATCGGCCGGTTAAGAGATCGGTGAGTGCGGGATCTCCACCTGTTGTTACTGGGCTTTACATGAGCCCAGGAAGCCCAACTGGATCTGATGTCAGTGATTCAAGTACTATCCCGATATTACCTTCCGTTGAGCTTTTCAAGCCTGTGCCTAGACCTGGTGCTGTTGTGCTACCGCTTCCTATCGAAACGTCGTCTTCTTCCGATGATCCACCGACTTCGTTAAGCTTGTCACTTCCTGGTGCCGACGTAAGCGAGGAGTCAAACCGTAGCCACGAGTCAACGAATATCAACAACACCACTTCGAGCCGCCACAACCACAACAATACGGTGTCGTTTATGCCGTTTAGTGGTGGGTTTAGAGGTGCGATTGAGGAAATGGGGAAGTCTTTTCCCGGTAACGGAGGCGAGTTTATGGCGGTGGTGCAAGAGATGATTAAGGCGGAAGTGAGGAGTTACATGACGGAGATGCAACGGAACAATGGTGGCGGATTCGTCGGAGGATTCATTGATAATGGCATGATTCCGATGAGTCAAATTGGAGTTGGGAGAATCGAGTAG";
    std::string dna_d = "ATGCTGATAGATCAAAGGTCCATGGAGTCCTGAAGAAGACGAGCAGCTTCGTAGGCTTGTTGTTAAATACGGTCCAAGAAACTGGACAGTGATTAGCAAATCTATTCCCGGTAGATCGGGGAAATCGTGTCGTTTACGGTGGTGCAACCAGCTTTCGCCGCAAGTTGAGCATCGGCCGTTTTCGGCTGAGGAAGACGAGACGATCGCACGTGCTCACGCTCAGTTCGGTAATAAATGGGCGACGATTGCTCGTCTTCTCAACGGTCGTACGGACAACGCCGTGAAGAATCACTGGAACTCGACGCTCAAGAGGAAATGCGGCGGTTACGACCATCGGGGTTACGATGGTTCGGAGGATCATCGGCCGGTTAAGAGATCGGTGAGTGCGGGATCTCCACCTGTTGTTACTGGGCTTTACATGAGCCCAGGAAGCCCAACTGGATCTGATGTCAGTGATTCAAGTACTATCCCGATATTACCTTCCGTTGAGCTTTTCAAGCCTGTGCCTAGACCTGGTGCTGTTGTGCTACCGCTTCCTATCGAAACGTCGTCTTCTTCCGATGATCCACCGACTTCGTTAAGCTTGTCACTTCCTGGTGCCGACGTAAGCGAGGAGTCAAACCGTAGCCACGAGTCAACGAATATCAACAACACCACTTCGAGCCGCCACAACCACAACAATACGGTGTCGTTTATGCCGTTTAGTGGTGGGTTTAGAGGTGCGATTGAGGAAATGGGGAAGTCTTTTCCCGGTAACGGAGGCGAGTTTATGGCGGTGGTGCAAGAGATGATTAAGGCGGAAGTGAGGAGTTACATGACGGAGATGCAACGGAACAATGGTGGCGGATTCGTCGGAGGATTCATTGATAATGGCATGATTCCGATGAGTCAAATTGGAGTTGGGAGAATCGAGTAG";
    int32_t match_score = 1;
    int32_t mis_match_score = -1;
    int32_t open_gap_penalty = -2;
    int32_t extend_gap_penalty = -1;

    NeedlemanWunsch_simd_Slow needlemanWunsch_simd(dna_q, dna_d, match_score, mis_match_score, open_gap_penalty, extend_gap_penalty, nucleotideCodeSubstitutionMatrix);
    ASSERT_EQ(0, 0);

    __m256i* vProfile = needlemanWunsch_simd.query_profile_avx2_byte(nucleotideCodeSubstitutionMatrix);

    needlemanWunsch_simd.ssw_avx2(vProfile, nucleotideCodeSubstitutionMatrix);

    ASSERT_EQ(0, 0);
}



TEST(needlemanWunsch_simd_test, c5){
    std::string parameterFile = "configure";
    std::map<std::string, std::string> parameters = initialize_paramters(parameterFile, "./");
    NucleotideCodeSubstitutionMatrix nucleotideCodeSubstitutionMatrix(parameters);
    std::string dna_q = "ATGTCCAATTATCCACCGACGGTGGCGGCGCAACCCACAACGACGGCGAATCCACTGCTGCAGCGACATCAATCTGAACAGCGACGAAGAGAATTACCGAAGATTGTCGAAACAGAGTCTACAAGTATGGACATTACGATCGGTCAATCTAAGCAGCCTCAATTTTTGAAATCCATAGACGAATTAGCTGCGTTTTCAGTTGCAGTGGAAACATTCAAACGCCAATTCGATGATCTTCAGAAGCACATCGAGTCAATCGAAAACGCAATTGATTCCAAACTCGAGAGTAACGGCGTTGTCCTCGCCGCGCGGAACAATAATTTCCATCAGCCGATGTTATCGCCTCCGCGGAACAATGTATCTGTAGAAACCACCGTCACTGTGAGCCAACCGTCTCAGGAGATTGTACCGGAGACGTCGAATAAACCGGAGGGGGAACGTATATGTGAGTTGATGTGTAGCAAAGGTCTGCGTAAATACATATACGCGAATATCTCTGATCAAGCTAAGTTAATGGAAGAGATTCCTTCAGCTTTGAAATTGGCCAAGGAGCCAGCGAAGTTTGTATTGGATTGTATTGGCAAGTTTTACTTACAAGGGCGTAGAGCATTTACTAAAGAGTCGCCTATGAGCTCTGCGAGACAAGTTTCGCTTCTTATACTGGAGTCTTTTCTTCTAATGCCTGATCGTGGTAAAGGGAAGGTGAAGATTGAGAGTTGGATTAAAGATGAGGCGGAGACGGCTGCTGTTGCTTGGAGGAAAAGGTTGATGACTGAAGGAGGATTAGCTGCGGCTGAGAAAATGGATGCAAGGGGTTTGCTTTTACTAGTTGCTTGTTTTGGTGTTCCTTCAAACTTTAGGAGTACAGATTTGCTGGATTTGATAAGGATGAGTGGTTCGAATGAGATTGCCGGTGCTTTGAAGCGGTCACAGTTTCAGGTATAG";
    std::string dna_d = "TTCCTAATTAATATATAATTTATGTGAACTTCACAATATACAGTTCAATAAAATTTGGTAATTTGACCGATTTAAGGAGAGTGGAAATTAGGGCTTCTGCAATCTTTTTTCTTCGCCGCAATCTCATGTCCAATTATCCACCGACGGTGGCGGCGCAACCCACAACGACGGCGAATCCACTGCTGCAGCGACATCAATCTGAACAGCGACGAAGAGAATTACCGAAGATTGTCGAAACAGAGTCTACAAGTATGGACATTACGATCGGTCAATCTAAGCAGCCTCAATTTTTGAAATCCATAGACGAATTAGCTGCGTTTTCAGTTGCAGTGGAAACATTCAAACGCCAATTCGATGATCTTCAGAAGCACATCGAGTCAATCGAAAACGCAATTGATTCCAAACTCGAGAGTAACGGCGTTGTCCTCGCCGCGCGGAACAATAATTTCCATCAGCCGATGTTATCGCCTCCGCGGAACAATGTATCTGTAGAAACCACCGTCACTGTGAGCCAACCGTCTCAGGAGATTGTACCGGAGACGTCGAATAAACCGGAGGGGGAACGTATATGTGAGTTGATGTGTAGCAAAGGTCTGCGTAAATACATATACGCGAATATCTCTGATCAAGCTAAGTTAATGGAAGAGATTCCTTCAGCTTTGAAATTGGCCAAGGAGCCAGCGAAGTTTGTATTGGATTGTATTGGCAAGTTTTACTTACAAGGGCGTAGAGCATTTACTAAAGAGTCGCCTATGAGCTCTGCGAGACAAGTTTCGCTTCTTATACTGGAGTCTTTTCTTCTAATGCCTGATCGTGGTAAAGGGAAGGTGAAGATTGAGAGTTGGATTAAAGATGAGGCGGAGACGGCTGCTGTTGCTTGGAGGAAAAGGTTGATGACTGAAGGAGGATTAGCTGCGGCTGAGAAAATGGATGCAAGGGGTTTGCTTTTACTAGTTGCTTGTTTTGGTGTTCCTTCAAACTTTAGGAGTACAGATTTGCTGGATTTGATAAGGATGAGTGGTTCGAATGAGATTGCCGGTGCTTTGAAGCGGTCACAGTTTCAGGTACCATATTCTGTTCTCACTCGGTGAATTTCATTGCAAAGGTGGTTCCTTTTGTTGACATCATCGACCAACATCAAGTTCCATCTTTGTTTTTCGATAAGCTTGATGGTATAAACTAGGAGAGCACATCAAATATTTAGAGTGCAATGACTGATTGAGCCAAATCCTAGCTAGAAATTAATCTGGAAAGAACTTGGAACTCTCAACCATAGGTTTTGGTACGAAATTGTTGCTTGTCAGAACCAAATGATAGGCTATTGCCTTGAAATAGTGTTTCTTGTGGTTTCCAATATTGGAAGTTAAAATCATATGACTTAGCTGTTGGATACTAATTAAGCTTAAGCAATGCCAACTCTAAGAAGTGGTACTTACACAATATTCTATTGGTCATAGGTATAGTTGAATCAAGTATCAAGCGTGGAATGCATATTGAAGCTCTTGAAATGGTTTATACCTTTGGCATGGAGGATAAGTTTTCAGCTGCTCTAGTTCTAACTTCATTCTTAAAGATGAGCAAGGAGTCATTTGAGAGGGCAAAACGGAAAGCCCAGTCACCGCTGGCATTTGTATGAACCCTTCCCTTGCACATTATGTACCTTTATGAACTCTTTATCATCATCTGAGTCTGACCATTGATATATTTATTTCTCAACAGAAAGAAGCGGCTACAAAGCAGCTAGCTGTGTTATCATCAGTTATGCAGTGTATGGAGACTCACAAGTTAGATCCTGCGAAAGAACTACCAGGATGGCAGATCAAAGAGCAAATTGTTAGCTTGGAGAAAGACACTCTTCAGCTCGACAAAGAGATGGAAGAGAAAGCAAGATCTCTCAGTTTAATGGAGGAAGCCGCACTTGCCAAGAGAATGTATAACCAACAGATAAAACGTCCAAGGTTATCACCCATGGAAATGCCACCAGTAACTTCTTCATCGTATTCTCCTATCTACCGTGATAGAAGCTTTCCTAGTCAAAGAGACGATGACCAAGATGAAATATCAGCTCTTGTGAGTAGTTACCTCGGCCCGTCAACATCTTTTCCTCATCGCTCAAGAAGATCCCCGGAATATATGGTTCCACTTCCACATGGTGGGTTAGGAAGAAGTGTATATGCATATGAACATCTGGCCCCAAATTCATATTCTCCAGGTCACGGACATAGACTTCATCGACAGTACTCTCCGTCTTTGGTTCACGGACAGAGACATCCACTACAGTACTCTCCTCCAATTCATGGACAACAACAGTTACCATATGGTATACAAAGGGTTTACAGACATTCACCATCTGAAGAAAGATATTTGGGTTTATCCAATCAAAGGTCTCCTCGCAGTAACTCATCATTAGACCCCAAATAGGAGGAATGTAAATTTGTAACAAAGCTTTTTGTTTTTGCTTAAGTTAGTCATTTATTTAACTCCCAACAGTCTCAAAATTTAATTTAATGTTTGGGGCTTAAGAATGCAAATTTTTTTGCTCCTGTAATTGACATTTAAGATGCTAATGTTATTGCTTCAGAGGTTTTAGTCAACCTCAGATA";
    int32_t match_score = 1;
    int32_t mis_match_score = -1;
    int32_t open_gap_penalty = -2;
    int32_t extend_gap_penalty = -1;

    NeedlemanWunsch_simd_Slow needlemanWunsch_simd(dna_q, dna_d, match_score, mis_match_score, open_gap_penalty, extend_gap_penalty, nucleotideCodeSubstitutionMatrix);
    std::cout << std::endl;
    needlemanWunsch_simd.print_results();
    ASSERT_EQ(0, 0);
}

TEST(NeedlemanWunsch, c5){
    std::string parameterFile = "configure";
    std::map<std::string, std::string> parameters = initialize_paramters(parameterFile, "./");
    NucleotideCodeSubstitutionMatrix nucleotideCodeSubstitutionMatrix(parameters);
    std::string dna_q = "ATGTCCAATTATCCACCGACGGTGGCGGCGCAACCCACAACGACGGCGAATCCACTGCTGCAGCGACATCAATCTGAACAGCGACGAAGAGAATTACCGAAGATTGTCGAAACAGAGTCTACAAGTATGGACATTACGATCGGTCAATCTAAGCAGCCTCAATTTTTGAAATCCATAGACGAATTAGCTGCGTTTTCAGTTGCAGTGGAAACATTCAAACGCCAATTCGATGATCTTCAGAAGCACATCGAGTCAATCGAAAACGCAATTGATTCCAAACTCGAGAGTAACGGCGTTGTCCTCGCCGCGCGGAACAATAATTTCCATCAGCCGATGTTATCGCCTCCGCGGAACAATGTATCTGTAGAAACCACCGTCACTGTGAGCCAACCGTCTCAGGAGATTGTACCGGAGACGTCGAATAAACCGGAGGGGGAACGTATATGTGAGTTGATGTGTAGCAAAGGTCTGCGTAAATACATATACGCGAATATCTCTGATCAAGCTAAGTTAATGGAAGAGATTCCTTCAGCTTTGAAATTGGCCAAGGAGCCAGCGAAGTTTGTATTGGATTGTATTGGCAAGTTTTACTTACAAGGGCGTAGAGCATTTACTAAAGAGTCGCCTATGAGCTCTGCGAGACAAGTTTCGCTTCTTATACTGGAGTCTTTTCTTCTAATGCCTGATCGTGGTAAAGGGAAGGTGAAGATTGAGAGTTGGATTAAAGATGAGGCGGAGACGGCTGCTGTTGCTTGGAGGAAAAGGTTGATGACTGAAGGAGGATTAGCTGCGGCTGAGAAAATGGATGCAAGGGGTTTGCTTTTACTAGTTGCTTGTTTTGGTGTTCCTTCAAACTTTAGGAGTACAGATTTGCTGGATTTGATAAGGATGAGTGGTTCGAATGAGATTGCCGGTGCTTTGAAGCGGTCACAGTTTCAGGTATAG";
    std::string dna_d = "TTCCTAATTAATATATAATTTATGTGAACTTCACAATATACAGTTCAATAAAATTTGGTAATTTGACCGATTTAAGGAGAGTGGAAATTAGGGCTTCTGCAATCTTTTTTCTTCGCCGCAATCTCATGTCCAATTATCCACCGACGGTGGCGGCGCAACCCACAACGACGGCGAATCCACTGCTGCAGCGACATCAATCTGAACAGCGACGAAGAGAATTACCGAAGATTGTCGAAACAGAGTCTACAAGTATGGACATTACGATCGGTCAATCTAAGCAGCCTCAATTTTTGAAATCCATAGACGAATTAGCTGCGTTTTCAGTTGCAGTGGAAACATTCAAACGCCAATTCGATGATCTTCAGAAGCACATCGAGTCAATCGAAAACGCAATTGATTCCAAACTCGAGAGTAACGGCGTTGTCCTCGCCGCGCGGAACAATAATTTCCATCAGCCGATGTTATCGCCTCCGCGGAACAATGTATCTGTAGAAACCACCGTCACTGTGAGCCAACCGTCTCAGGAGATTGTACCGGAGACGTCGAATAAACCGGAGGGGGAACGTATATGTGAGTTGATGTGTAGCAAAGGTCTGCGTAAATACATATACGCGAATATCTCTGATCAAGCTAAGTTAATGGAAGAGATTCCTTCAGCTTTGAAATTGGCCAAGGAGCCAGCGAAGTTTGTATTGGATTGTATTGGCAAGTTTTACTTACAAGGGCGTAGAGCATTTACTAAAGAGTCGCCTATGAGCTCTGCGAGACAAGTTTCGCTTCTTATACTGGAGTCTTTTCTTCTAATGCCTGATCGTGGTAAAGGGAAGGTGAAGATTGAGAGTTGGATTAAAGATGAGGCGGAGACGGCTGCTGTTGCTTGGAGGAAAAGGTTGATGACTGAAGGAGGATTAGCTGCGGCTGAGAAAATGGATGCAAGGGGTTTGCTTTTACTAGTTGCTTGTTTTGGTGTTCCTTCAAACTTTAGGAGTACAGATTTGCTGGATTTGATAAGGATGAGTGGTTCGAATGAGATTGCCGGTGCTTTGAAGCGGTCACAGTTTCAGGTACCATATTCTGTTCTCACTCGGTGAATTTCATTGCAAAGGTGGTTCCTTTTGTTGACATCATCGACCAACATCAAGTTCCATCTTTGTTTTTCGATAAGCTTGATGGTATAAACTAGGAGAGCACATCAAATATTTAGAGTGCAATGACTGATTGAGCCAAATCCTAGCTAGAAATTAATCTGGAAAGAACTTGGAACTCTCAACCATAGGTTTTGGTACGAAATTGTTGCTTGTCAGAACCAAATGATAGGCTATTGCCTTGAAATAGTGTTTCTTGTGGTTTCCAATATTGGAAGTTAAAATCATATGACTTAGCTGTTGGATACTAATTAAGCTTAAGCAATGCCAACTCTAAGAAGTGGTACTTACACAATATTCTATTGGTCATAGGTATAGTTGAATCAAGTATCAAGCGTGGAATGCATATTGAAGCTCTTGAAATGGTTTATACCTTTGGCATGGAGGATAAGTTTTCAGCTGCTCTAGTTCTAACTTCATTCTTAAAGATGAGCAAGGAGTCATTTGAGAGGGCAAAACGGAAAGCCCAGTCACCGCTGGCATTTGTATGAACCCTTCCCTTGCACATTATGTACCTTTATGAACTCTTTATCATCATCTGAGTCTGACCATTGATATATTTATTTCTCAACAGAAAGAAGCGGCTACAAAGCAGCTAGCTGTGTTATCATCAGTTATGCAGTGTATGGAGACTCACAAGTTAGATCCTGCGAAAGAACTACCAGGATGGCAGATCAAAGAGCAAATTGTTAGCTTGGAGAAAGACACTCTTCAGCTCGACAAAGAGATGGAAGAGAAAGCAAGATCTCTCAGTTTAATGGAGGAAGCCGCACTTGCCAAGAGAATGTATAACCAACAGATAAAACGTCCAAGGTTATCACCCATGGAAATGCCACCAGTAACTTCTTCATCGTATTCTCCTATCTACCGTGATAGAAGCTTTCCTAGTCAAAGAGACGATGACCAAGATGAAATATCAGCTCTTGTGAGTAGTTACCTCGGCCCGTCAACATCTTTTCCTCATCGCTCAAGAAGATCCCCGGAATATATGGTTCCACTTCCACATGGTGGGTTAGGAAGAAGTGTATATGCATATGAACATCTGGCCCCAAATTCATATTCTCCAGGTCACGGACATAGACTTCATCGACAGTACTCTCCGTCTTTGGTTCACGGACAGAGACATCCACTACAGTACTCTCCTCCAATTCATGGACAACAACAGTTACCATATGGTATACAAAGGGTTTACAGACATTCACCATCTGAAGAAAGATATTTGGGTTTATCCAATCAAAGGTCTCCTCGCAGTAACTCATCATTAGACCCCAAATAGGAGGAATGTAAATTTGTAACAAAGCTTTTTGTTTTTGCTTAAGTTAGTCATTTATTTAACTCCCAACAGTCTCAAAATTTAATTTAATGTTTGGGGCTTAAGAATGCAAATTTTTTTGCTCCTGTAATTGACATTTAAGATGCTAATGTTATTGCTTCAGAGGTTTTAGTCAACCTCAGATA";
    int32_t match_score = 1;
    int32_t mis_match_score = -1;
    int32_t open_gap_penalty = -2;
    int32_t extend_gap_penalty = -1;
    ASSERT_EQ(0.0, 0.0);
    NeedlemanWunsch needlemanWunsch(dna_q, dna_d, match_score, mis_match_score, open_gap_penalty, extend_gap_penalty, nucleotideCodeSubstitutionMatrix);
    needlemanWunsch.calculate_similarity(nucleotideCodeSubstitutionMatrix);
    needlemanWunsch.get_optimal_alignment();
    std::cout << std::endl;
    needlemanWunsch.print_results();
    std::cout << "finished" << std::endl;

    ASSERT_EQ(0.0, 0.0);
}
